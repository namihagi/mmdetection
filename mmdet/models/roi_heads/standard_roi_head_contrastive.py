import torch

from mmdet.core import bbox2roi
from ..builder import HEADS
from .standard_roi_head import StandardRoIHead


@HEADS.register_module()
class StandardRoIHeadForContrasitve(StandardRoIHead):
    """Simplest base roi head including one bbox head and one mask head."""

    def forward_train(self,
                      x,
                      proposal_list):
        """
        Args:
            x (list[Tensor]): list of multi-level img features.
            proposals (list[Tensors]): list of psuedo boxes generated by rand_box
                with shape [num_boxes, 4] in  [lt_x, lt_y, br_x, br_y] format.

        Returns:
            Tensor: roi_feats
        """

        # bbox head forward
        bbox_feats = self._bbox_forward_train(x, proposal_list)

        return bbox_feats

    def _bbox_forward(self, x, rois):
        """Box head forward function used in both training and testing."""
        # TODO: a more flexible way to decide which feature maps to use
        bbox_feats = self.bbox_roi_extractor(
            x[:self.bbox_roi_extractor.num_inputs], rois)
        if self.with_shared_head:
            bbox_feats = self.shared_head(bbox_feats)
        if self.with_bbox:
            bbox_feats = self.bbox_head(bbox_feats)

        return bbox_feats

    def _bbox_forward_train(self, x, proposal_list):
        """Run forward function and get roi feats."""
        rois = bbox2roi(proposal_list)
        bbox_feats = self._bbox_forward(x, rois)

        return bbox_feats
